<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cli on Meditations in Code - A.H.</title>
    <link>https://AH-DevWorks.github.io/tags/cli/</link>
    <description>Recent content in Cli on Meditations in Code - A.H.</description>
    <generator>Hugo</generator>
    <language>zh-tw</language>
    <managingEditor>a.h.devworks@gmail.com (AH-DevWorks)</managingEditor>
    <webMaster>a.h.devworks@gmail.com (AH-DevWorks)</webMaster>
    <lastBuildDate>Tue, 29 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://AH-DevWorks.github.io/tags/cli/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>YOLOv12/v11 模型訓練與推論</title>
      <link>https://AH-DevWorks.github.io/post/2025/ai/yolo-devcontainer_20250729/</link>
      <pubDate>Tue, 29 Jul 2025 00:00:00 +0000</pubDate><author>a.h.devworks@gmail.com (AH-DevWorks)</author>
      <guid>https://AH-DevWorks.github.io/post/2025/ai/yolo-devcontainer_20250729/</guid>
      <description>&lt;p&gt;&lt;em&gt;A clean and reproducible pipeline for YOLO training, validation, testing and prediction using CLI and VSCode DevContainers.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;目錄-table-of-contents&#34;&gt;目錄 Table of Contents&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E5%8B%95%E6%A9%9F%E8%88%87%E7%94%A8%E9%80%94--why-this-setup&#34;&gt;動機與用途 | Why this setup?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E5%9F%B7%E8%A1%8C%E6%96%B9%E5%BC%8F--how-to-run&#34;&gt;執行方式 | How to Run&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#1-clone-%E5%B0%88%E6%A1%88&#34;&gt;1. Clone 專案&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#2-1-%E4%BD%BF%E7%94%A8-vscode-devcontainer-%E6%8E%A8%E8%96%A6&#34;&gt;2-1. 使用 VSCode DevContainer (推薦)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#2-2-%E9%96%8B%E5%95%9F%E5%BE%8C%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8-py-%E5%9F%B7%E8%A1%8C&#34;&gt;2-2. 開啟後直接使用 &lt;code&gt;.py&lt;/code&gt; 執行&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#cli-%E6%A8%A1%E7%B5%84%E8%A8%AD%E8%A8%88--cli-script-design&#34;&gt;CLI 模組設計 | CLI Script Design&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E5%B8%B8%E8%A6%8B%E8%AA%BF%E6%95%B4%E9%BB%9E--customizable-elements&#34;&gt;常見調整點 | Customizable Elements&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E5%BF%83%E5%BE%97%E8%88%87%E5%82%99%E5%BF%98--notes--learnings&#34;&gt;心得與備忘 | Notes &amp;amp; Learnings&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;動機與用途--why-this-setup&#34;&gt;動機與用途 | Why this setup?&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;原本是轉職班小組專題的模型訓練核心程式，經過不少 Trial and Error，到中期才比較完整。整理、分享出來，當作一個歷程紀錄&lt;/li&gt;&#xA;&lt;li&gt;程式本身提供一套 YOLO（v11、v12為主）的物件偵測流程（Train-Valid-Test）&lt;/li&gt;&#xA;&lt;li&gt;以 notebook 為主要使用介面，支援互動式開發與視覺化&lt;/li&gt;&#xA;&lt;li&gt;另提供 Python CLI 腳本，用於簡化批次執行或伺服器自動化&lt;/li&gt;&#xA;&lt;li&gt;使用 Docker 容器封裝整體環境，確保部署時對跨平台／系統的一致性&lt;/li&gt;&#xA;&lt;li&gt;對應訓練、驗證、測試、推論流程皆已封裝為獨立模組，可彈性組合使用&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;執行方式--how-to-run&#34;&gt;執行方式 | How to Run&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-clone-專案&#34;&gt;1. Clone 專案&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/AH-DevWorks/yolo-devcontainer.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999&#34;&gt;cd&lt;/span&gt; yolo-devcontainer&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;**預訓練權重(.pt檔)**可到 &lt;a href=&#34;https://www.ultralytics.com/&#34;&gt;Ultralytics 網站&lt;/a&gt; 下載&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.ultralytics.com/models/yolo12/#detection-performance-coco-val2017&#34;&gt;v12&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.ultralytics.com/models/yolo11/#performance-metrics&#34;&gt;v11&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;p.s. 權重有分大小（n, s, m, l, x），建議衡量本機性能做挑選&#xA;&lt;ul&gt;&#xA;&lt;li&gt;個人使用 32GB RAM | RTX 4070(12G)，頂多到&lt;strong&gt;l&lt;/strong&gt;，x 會直接 OOM 爆記憶體&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-1-使用-vscode-devcontainer-推薦&#34;&gt;2-1. 使用 VSCode DevContainer (推薦)&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 開啟 VSCode 後選擇&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;F1 → Dev Containers: Reopen in Container&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-2-開啟後直接使用-py-執行&#34;&gt;2-2. 開啟後直接使用 &lt;code&gt;.py&lt;/code&gt; 執行&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python train.py --model models/yolo12n.pt --data data.yaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python valid.py --model runs/train/weights/best.pt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python test.py  --model runs/train/weights/best.pt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python predict.py --model runs/train/weights/best.pt --source dataset/images/test&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;cli-模組設計--cli-script-design&#34;&gt;CLI 模組設計 | CLI Script Design&lt;/h2&gt;&#xA;&lt;p&gt;所有 CLI script 使用統一的 &lt;code&gt;argparse&lt;/code&gt; 介面（定義於 &lt;code&gt;_common.py&lt;/code&gt;），並在各執行檔中加上必要擴充參數。&#xA;例如 &lt;code&gt;train.py&lt;/code&gt; 支援以下主要參數：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
