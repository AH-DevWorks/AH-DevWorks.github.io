[{"content":"【前一回】自架網站筆記：使用Github + Hugo（中）\nPART II : 設定內容倉庫（Contents-Repo） 本地另一個資料夾clone「放網站內容的repo（PART I步驟3建立的Contents-Repo）」 同樣初始化 touch README.md echo \"# [Contents-Repo]\" \u003e README.md git add README.md git commit -m \"Initial commit\" git push origin main 建立內容結構/資料夾 這裡可按照自己需要的層級或theme建議的層級來做 mkdir content cd content mkdir notes diary 建立一篇測試文章，如 echo -e \"+++\\ntitle = \\\"First Note\\\"\\ndate = 2025-04-05\\n+++\\n\\nThis is my first note.\" \u003e content/notes/first-note.md 或自己寫一個.md檔 push上去 注意這裡不要執行 hugo new site，Contents-Repo只負責網站上的內容檔案 將 Contents-Repo 引入到 Website-Repo cd回到 PART I 建立好的 Website-Repo 資料夾 加入 Contents-Repo 作為子模組，將 Contents-Repo 的內容直接映射到 content/ 資料夾 git submodule add -b main https://github.com/[user_name]/[Contents-Repo].git content 注意：這裡可能會出現像 fatal: 'content' already exists and is not a valid git repo 等錯誤–\u003e直接把原本資料夾裡有的「content」砍掉（或是裡面資料先備份到其他地方、之後再放回去） 抓取submodule內容 git submodule update --init --recursive 再次 hugo server 測試，正確的話原本在Contents-Repo裡面的文章（步驟4做的）應該會顯示在網站theme對應的地方（如網站 [Notes] 標籤底下） 沒問題的話記得push提交更改 PART III : 部署網站到 GitHub Pages 生成靜態檔案：在Website-Repo用 hugo指令，在其下的 public/ 資料夾生成靜態網站檔案 把public/資料夾裡已生成的靜態網站全部檔案挪到前一層（手動把檔案複製貼上也可以） cp -r public/* . 提交 git add . git commit -m \"Generate static site\" git push origin main 檢查網站是否正常顯示（github倉庫-Settings-Pages會顯示「Your site live at https://...」） 做到這，網站其實就算是架好了，其他細節跟QA放在下篇。 【待續】 ","title":"自架網站筆記：使用Github + Hugo（中）","uri":"/notes/website/create_static_web_2/"},{"content":"This is my first note.\na = 1 b = 2 print(f\"a+b={a+b}\") ","title":"First Note","uri":"/notes/website/first-note/"},{"content":" 第一篇文章，總之先簡單記錄這個靜態網站怎麼做的，不然大概隔幾天又忘光光。 寫給自己看的，有些我已經懂的部份（像是Git）寫比較簡單。如果你是無意看到這篇，想看懂但看不懂，可以私信我。 PART 0 : 這個網站的目標 由兩大部份構成：\nWebsite-Repo：負責靜態網站呈現（用 Hugo build 出來的 HTML/CSS/JS）。 Contents-Repo：放原始內容（markdown，如 content/notes、content/diary）。 未來更新內容主要會在 Contents-Repo，然後將生成的網站部署到 Website-Repo。 也會將其他專案 repo（像 side projects）整合進這個 Hugo 網站。 PART I : 基礎設定 已經有github帳號 Windows winget install Hugo.Hugo.Extended 安裝Hugo github新建兩個repo：一個放內容（Contents-Repo），一個負責網站本身(Website-Repo. – ex.AH-DevWorks.github.io) 初始化git分支 touch README.md echo \"# [Website-Repo]\" \u003e README.md git add README.md git commit -m \"Initial commit\" git push origin main 本地clone放網站內容的repo，hugo new site . 設在母資料夾較佳，建議別再額外新增如 hugo new site [MySite etc.]，否則後續要每次都手動挪動/public或額外設定自動腳本，會很麻煩。 若母資料夾已有內容（如README.md），則用 hugo new site . --force 等Hugo自動建立好內容後，cd到themes資料夾；挑個Hugo的theme，照著說明來裝（例如clone 到 themes資料夾，或用Git submodules處理） 把這個theme設成預設： 回到步驟5建立好的母資料夾，vi hugo.toml 編輯toml內容： A. [baseURL]改成步驟3負責網站本身的repo網址(通常是https://[user_name].github.io/)；B. [title]改隨意（會顯示往站上）；C. [theme]改成前幾步驟挑選的 初步測試：hugo server，應該會有空白模板或theme預設範本網頁 有些theme偏舊，這步會出現問題，直接換一個theme比較省事 正確的話bash或cmd會顯示網站生成的頁數、靜態檔案數量等資訊 找到其中Web Server is available at http://localhost:1313/...這行，貼到瀏覽器，有出現看起來像網頁的樣子就對 確認ok後要再提交一次更改到github git add . git commit -m \"Set up website with theme\" git push origin main 【下一回】自架網站筆記：使用Github + Hugo（中）\n","title":"自架網站筆記：使用Github + Hugo（上）","uri":"/notes/website/create_static_web_1/"},{"content":"[Contents] ","title":"","uri":"/readme/"}]
