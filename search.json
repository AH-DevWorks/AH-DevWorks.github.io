[{"content":"Python實作 Bubble Sort ※排序演算法(Sorting Algorithm)是將資料依特定規則進行重新排列的演算法，通常是依照資料的大小進行排列，Bubble Sort是其中之一。\n※資料排序後，就能進一步對其進行更有效率的分析或搜尋。如「二分搜尋法」在資料數較多時，效率高於循序搜尋，但執行二分搜尋之前，必須先將原始資料排序。\n程式碼 def user_input_check(message): while True: try: user_input = input(message) if '.' not in user_input: return int(user_input) else: return float(user_input) except ValueError: print(\"請輸入正確的數字...\") def bubble_sort(number_list): for i in range(1, len(number_list)): print(f\"### 第{i}輪 ###\") for j in range(len(number_list) - i): if number_list[j] \u003e number_list[j + 1]: number_list[j], number_list[j + 1] = number_list[j + 1], number_list[j] print(f\"\u003e\u003e資料狀態: {number_list}\") print(\"-------------------\") return number_list print(\"———請輸入以下資訊———\") data_length = 0 while data_length \u003c= 0: data_length = int(user_input_check(\"資料總數量：\\n\")) data_list = [] for num in range(data_length): data_list.append(user_input_check(f\"第{num + 1}筆資料: \")) print(f\"\\n\\n原始資料:{data_list}\") print(\"-------------------\") sorted_list = bubble_sort(data_list.copy()) print(f\"排序後資料: {sorted_list}\") 執行畫面 說明 上面程式碼是自己練習寫的，可能不是最好的bubble sort寫法 user_input_check(message): 輸入檢查，跟bubble sort無關，只是習慣放 bubble_sort(number_list): 排序法本體，外層 for loop 控制排序的輪數，每輪最後會把一個最大值排到最右側；內層 for loop 進行相鄰元素比較與交換 值得一提是中間 number_list[j], number_list[j + 1] = number_list[j + 1], number_list[j] ，這種寫法是Python特有的，涉及 tuple 型別的 packing / unpacking ，一行就能交換兩變數值 如果是其他程式語言，要兩數互換大多需要再一個temp變數，分三行如 temp=var1、var1=var2、var2=temp 從巢狀for loop就能看出bubble sort的時間複雜度是O(n²)，效率差，實務上基本沒人會用。但就入門迴圈邏輯＆資料操作思維來說，應該還是有幫助。至少我希望有幫助…✏️ ","description":"氣泡排序法（泡沫排序法）練習","tags":["learning","algorithm","sorting","bubble sort"],"title":"Python 實作 Bubble Sort","uri":"/post/2025/algorithm/bubble_sort_20250414/"},{"content":"第一週：4/7、4/8、4/10、4/12 自我介紹環節，有不少資訊本科系或做過科技業，甚至還有自費生，真心佩服。 簡單翻了一下歷屆學長姐成果，從電腦視覺到混合應用的都有。該來想想專題的主題了（小組專題＆個人的Side Project）。希望結訓後履歷至少能塞滿一整頁。 使用者家目錄 C:\\Users\\[USER-NAME]\\ // 動態（隨登入者變化） // 登入者(USER)對家目錄有最高權限 Adding Python Path to Environment Variables Zero Trust pypi.org encode/decode history: ASCII -\u003e BIG-5 -\u003e Unicode(UTF-8/UTF-16…) character set（字元集） f-string: {}(Curly Brackets)內必須為expression (表達式) statement(敘述句,如print())等無回傳值的不應放入(會None) str.format() (\"[pattern]\".format(a,b,c…)) print(\"他是 {}，今年 {} 歲。\".format(\"Johnny\", 88)) # 輸出：他是 Johnny，今年 88 歲。 float非精準數，比對時以區間比對較佳 a = 100.0 b = 11.11 / 0.1111 print(f\"a 等於 b ? --\u003e {a == b}\") # a 等於 b ? --\u003e False print(f\"a: {a} | b: {b}\") # a: 100.0 | b: 99.99999999999999 eval() x = eval(input(\"Input:\")) # eval()自動評估數字型別＆轉換 # 不適用非數字 match-case rating = 5 match rating: case 1: print(\"第1名，獎金10,000元！\") case 2: print(\"第2名，獎金5,000元\") case 3 | 4 | 5 as number: # 後置宣告 -- as print(f\"佳作(第{number}名)，獎金500元\") case _: print(\"下次再接再厲！\") # Tuple niceSeasons = (\"春\", \"秋\") match niceSeasons: # 元素順序要一致，否則比對失敗: case (\"秋\", \"春\"): print(\"溫和季節\") case _: print(\"季節比對失敗\") 自補充 f-string 細節 若數字num是正整數如 7 ，f\"{num:02d}\" 和 f\"{num:0\u003e2}\" 結果看起來會一樣 num = 7 print(f\"{num:02d}\") # 07 print(f\"{num:0\u003e2}\") # 07 但兩種 format 背後邏輯不一樣： num:02d –\u003e 數值格式化 : 「將變數 num 格式化成一個 最小寬度為 2 位數 的十進位整數(Decimal Integer)，如果不足 2 位，則在前面補 0 。 num:0\u003e2 –\u003e 字串對齊格式化 : 「把 num 轉成 string 後，向右對齊(\u003e)，若num轉成string後，長度沒達到設定的『最小寬度』 2 ，則在左側補 0 直到寬度達標為止」。 因此如果碰到負數等特殊情況，第二種方式可能會出現錯誤的顯示，如： i = -42 print(f\"{i:05d}\") # ✅-0042 print(f\"{i:0\u003e5}\") # ❗00-42 p.s. num:0\u003e2 這種方式，若num本身長度就大於設定的「最小寬度(2)」，則Python 會自動擴展欄位，完整顯示數值，不受限。 Disbale path length limit after installed 假如裝 python 時沒勾選。安裝完畢後： modify the registry key: Windows Key + R, type “regedit” “Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\\LongPathsEnabled” –\u003e set its value to 1 Web Crawling tags \u003clabel for=\"name\"\u003eName:\u003c/label\u003e \u003cinput type=\"text\" id=\"name\" name=\"name\"\u003e for=“xxx” \u003c–\u003e id=“xxx” ∴點擊上面Name:的字，連動到input框閃爍可輸入，不必一定要點擊input框 type=\"hidden\" : 僅給開發者使用/確認, or 加上時間戳記,檢核、防爬蟲等 網頁上有name=\"\"標籤的通常會被form送出 動態網頁 cookie Headers Status Code Rest API payload pyenv – Python version control ETL Poetry 其他自學 Hello 演算法\n~ 4.2 從位址計算公式的角度看，索引本質上是記憶體位址的偏移量。首個元素的位址偏移量是0 ，因此陣列首個元素的索引為0是合理的 由於陣列的長度是固定的，因此插入一個元素必定會導致陣列尾部元素“丟失” 刪除元素完成後，原先末尾的元素變得“無意義”，所以無須特意去修改 import numpy as np # 建立一固定長度的 numpy 陣列 arr = np.array([10, 20, 30, 40, 50]) print(\"原始陣列：\", arr) # 插入一個元素到index[2]，並移動後面的元素 # 手動模擬插入（ numpy 不像 list 可以直接 insert） arr[3:] = arr[2:-1] # 往後推一格 arr[2] = 99 # 插入新值 print(\"插入 99 後：\", arr) # 原本的 50 被擠掉了 # 刪除索引 1 的元素（把後面的往前搬） arr[1:-1] = arr[2:] print(\"刪除索引 1 後：\", arr) # 最後一格雖然還有值，但已經是「無意義」的資料 print(\"最尾端元素實際上已經沒用了：\", arr[-1]) 自架 GitHub + Hugo 靜態網站(https://ah-devworks.github.io//tags/hugo/)：\nUI(font, i18n/[language] yaml, favicon)、footer調整 技術彙整大致完成，剩餘額外補充待整理 網站尚有改善空間（Google Analytics、SEO…），但反正能用了，先暫時這樣堪用就好 實體書\n岡野原大輔 (2024). 精確掌握 AI 大趨勢！深度學習技術解密：日本 AI 神人，帶你正確學會從機器學習到生成式 AI 的核心基礎 (王心薇 \u0026 施威銘研究室, Trans.). 旗標. 讀到第二章 順便根據其中2.1節額外找 最小平方法(Least Squares)教學，雖然現在機器學習應該都不是用OLS了 Ceder, N. (2019). Python 技術者們：練功！老手帶路教你精通正宗 Python 程式 (張耀鴻, Trans.). 旗標. 中文是根據3rd Edition翻譯的，查了一下原作者Naomi Ceder今年有4th Edition 以英文4th edition為主、中文3rd Edtion為輔，讀到2.3.2 目前比較明顯差異是不再要求裝Anaconda之類的IDE，改用Google Colab hosted Jupyter Notebook放範例 Jupyter筆記本由兩種類型的單元格組成：文本單元格和代碼單元格 Udemy線上課程\nsmtplib 網路託管：PythonAnywhere smtplib的涉及個人信箱帳密，還是別放到網上比較好 其他一些無關且須重複執行的project倒是可以託管 進度嚴重落後，這周弄靜態網站花太多時間了🫠 ","description":"當周學習與生活雜記","tags":["learning","journal"],"title":"轉職路：AI養成班 Week 1.","uri":"/notes/2025/weekly_journal_202504_1/"},{"content":"自架網站筆記：使用Github + Hugo（上） 自架網站筆記：使用Github + Hugo（中） 更新靜態網站內容的方法 把新內容準備好（Markdown, image等檔案要放到Content-Repo裡各自對應的子資料夾），更新push。 git add . git commit -m \"新增文章：new-post\" git push origin main # 如果檔案較多較大，push後建議等一下 確認前一步驟content-repo已經上傳、更新好了之後，轉到Web-Repo 🌟Web-Repo 更新submodule: git submodule update --remote (可選) git status 檢查content-repo檔案有引入 git add [檔案] 後，可以先 hugo server 本地確認網站更新無誤；或直接 hugo 後把 public/ 內新檔覆蓋更新到母資料夾 git add . –\u003e git commit –\u003e git push origin main ，過幾分鐘 github 處理好，刷新網站即可。 可以到github 的web-repo檢查進度（如下圖✅｜萬一出現❌表示哪裡出了問題，要回頭檢查） 常見QA \u0026 Tips 【本機跑正常，GitHub Pages 樣式卻很簡陋】：一路做到PART III都沒問題，但實際網址連到的網頁外觀卻跟「hugo server」測試時「http://localhost:1313/…」的網頁明顯不同。 通常是baseURL沒設定好，或是publish的相對路徑、theme路徑或資源沒有正確被拷貝，導致Github Pages抓不到樣式 建議前述PART I的步驟7第二點再次確認：baseURL應該會是「https://[你的使用者名稱].github.io/」 確認hugo生成的public檔案必須全部拷貝到前一層資料夾（通常就是「/[你的使用者名稱].github.io」） 且每次修正後，都要重新hugo、update一次，讓Github Pagese更新（通常push後不會即時刷新，要等一下 –\u003e 可看github倉庫-Settings-Pages網站網址底下的小字「Last deployed by @user xxx minutes ago」來判斷刷新了沒） 有時候可能是theme本身的問題，假如theme本身有exampleSite（contents, layout等資料夾），建議可以複製回去、保持樣式，之後再來把範本內文取代掉 修改網站圖示(Favicon / Website Icon) 瀏覽網頁時，畫面上方網頁名稱的旁邊的那個小icon就是Favicon，預設會是主題自帶的icon。 製作 Favicon : 可以用 favicon.io 或 RealFaviconGenerator 之類的免費網站；懂PS的話也可以自己做，記得縮成512x512再轉成 .ico 或 .png 格式。 把Web-Repo/static/favicon 底下的檔案替換掉，重新hugo就行。 個人心得 拿關鍵字去google能找到很多「X分鐘快速架設網站」的文章或影片，但實際操作發現比較適合「就只是要個網站放些簡單文章/日記而已」的人，要多些功能的話，那複雜度就會開始上升了。 就我個人而言，首先構思網站的架構、層級劃分、文章類型就花了些時間； 挑theme又花了些時間，第一個挑的theme在clone時還碰到一堆缺少前製套件之類的奇怪狀況……； 再來又開始想「要把Content-Repo當成submodule？還是反過來把Web-Repo當成Content-Repo的sub？」之類，攸關彈性跟未來維護性等等的問題…… 明明簡單來說就只有兩個repo而已，花了快10小時，至少打掉重來三次……可能我是資質比較駑鈍的那種吧( 之後或許會不定期更新有關UI調整、自動部署（GitHub Actions/Hugo Deploy）、Project導入等等的筆記。 有任何疑問歡迎私信我 只是回信可能比較慢，請見諒。要是一直沒回覆，可以隔週再寄一次。\n— A.H.Dev-Works.\n參考資源 HUGO Docs Creating a Blog with Hugo and Github in 10 minutes –\u003e 注意這教的是把Web-Repo當成submodule的方法 【懶人包】使用 Hugo 5 分鐘內快速架設個人網站，號稱現在最快的自架網站方式 –\u003e 主要參考Hugo 從零開始: 用github pages 上傳靜態網站 Lightbi-Demo genryu-font ","description":"——自架靜態網站的過程紀錄．下篇——","tags":["hugo","blog","website"],"title":"自架網站筆記：使用Github + Hugo（下）","uri":"/post/2025/website/create_static_web_3/"},{"content":"【前一回】自架網站筆記：使用Github + Hugo（上） PART II : 設定內容倉庫（Contents-Repo） 本地另一個資料夾clone「放網站內容的repo（PART I步驟3建立的Contents-Repo）」 同樣初始化 touch README.md echo \"# [Contents-Repo]\" \u003e README.md git add README.md git commit -m \"Initial commit\" git push origin main 建立內容結構/資料夾 這裡可按照自己需要的層級或theme建議的層級來做 mkdir content cd content mkdir notes post 注意\r結構資料夾要包含Hugo在building網站時需要的各子資料夾\r通常是「contents」、「static」這兩個資料夾，但也不一定，建議翻查主題的Documents，有寫最好，沒寫的話就只能自己多hugo server測試幾次。\n建立一篇測試文章，如 echo -e \"+++\\ntitle = \\\"First Note\\\"\\ndate = 2025-04-05\\n+++\\n\\nThis is my first note.\" \u003e content/notes/first-note.md 或自己寫一個.md檔 push上去 注意這裡不要執行 hugo new site，Contents-Repo只負責網站上的內容檔案 [2025/04/11 更新] 6. 把Content-Repo的檔案（content/資料夾裡的.md文件 ＆ 可能有static/裡的圖片等額外檔案）確認都ok後，在這個資料夾先git add -\u003e commit -\u003e push 一次後，手動複製 content/ static/兩資料夾到 Web-Repo/ 底下，覆蓋更新原本Web-Repo/裡面的同名資料夾跟檔案 註: 原本submodule引入的方式太複雜，也容易出錯，反正兩個repo的檔案都在同一電腦本機，乾脆版本管理用各自的git，移動用手動的處理比較快。 再次 hugo server 測試，正確的話原本在Contents-Repo裡面的文章（步驟4做的）應該會顯示在網站對應的地方（如網站 [Notes] 標籤底下） 沒問題的話記得Web-repo 也要 push提交更改。 之後主要寫日記、文章、圖片都在Content-Repo進行，完成後git版本更新，再複製進Web-Repo/ 後 hugo，Web-Repo/也記得每次都要版本更新。這樣萬一哪次檔案不小心誤刪或蓋掉，還是可以回溯。 PART III : 部署網站到 GitHub Pages 生成靜態檔案：在Website-Repo用 hugo指令，在其下的 public/ 資料夾生成靜態網站檔案 把public/資料夾裡已生成的靜態網站全部檔案挪到前一層（手動把檔案複製貼上也可以） cp -r public/* . 提交 git add . git commit -m \"Generate static site\" git push origin main 再次add -\u003e commit -\u003e push 檢查網站是否正常顯示（github倉庫-Settings-Pages會顯示「Your site live at https://...」） 做到這，網站其實就算是架好了，其他細節跟QA放在下篇。 自架網站筆記：使用Github + Hugo（下） ","description":"——自架靜態網站的過程紀錄．中篇——","tags":["hugo","blog","website"],"title":"自架網站筆記：使用Github + Hugo（中）","uri":"/post/2025/website/create_static_web_2/"},{"content":" 第一篇文章，總之先簡單記錄這個靜態網站怎麼做的，不然大概隔幾天又忘光光。 原本只打算寫給自己複習用，所以有些我已經懂的部份（像是Git）寫比較簡單。如果有緣的你無意看到這篇，想看懂，但看不懂，歡迎私信我。 如果你/妳看到這篇文章的時候，網站已經有留言功能，也歡迎留言詢問。 PART 0 : 在動手之前 - 關於這個靜態網站 預先構想這個網站會由兩大部份（2 repositories）構成：\nWebsite-Repo：負責靜態網站呈現（用 Hugo build 出來的 HTML/CSS/JS）。 Contents-Repo：放原始內容（markdown，如 content/notes、content/diary）。 未來更新內容主要會在 Contents-Repo，然後將生成的網站部署到 Website-Repo。 也會將其他專案 repo（像 side projects）整合進這個 Hugo 網站。 行有餘力再多加上其他功能（Google Analytics, SEO, comments） PART I : 基礎設定 已經有github帳號 Windows winget install Hugo.Hugo.Extended 安裝Hugo（建議安裝 Hugo Extended版本，方便後續自訂模板樣式） github新建兩個repo：一個放內容（Contents-Repo），一個負責網站本身(Website-Repo. – ex.AH-DevWorks.github.io)，分別clone到本地的資料夾（這時兩個倉庫都還是空的，正常） 建議\r上述操作需要有「git」以及「github」的基礎理解，如果不懂的話，請先關鍵字google或問AI。\r初始化git分支 touch README.md echo \"# [Website-Repo]\" \u003e README.md git add README.md git commit -m \"Initial commit\" git push origin main 本地clone放網站內容的repo，hugo new site . 設在母資料夾較佳，建議別再額外新增如 hugo new site [MySite etc.]，否則後續要每次都手動挪動/public或額外設定自動腳本，會很麻煩。 若母資料夾已有內容（如README.md），則用 hugo new site . --force 等Hugo自動建立好內容後，cd到themes資料夾；挑個Hugo的theme，照著說明來裝（例如clone 到 themes資料夾，或用Git submodules處理） {{/* \u003c info_cards header=“suggest” title=“這裡以Lightbi為例” content=“https://themes.gohugo.io/themes/lightbi-hugo/\" \u003e */}} 把這個theme設成預設： 回到步驟5建立好的母資料夾，vi hugo.toml 編輯toml內容： A. [baseURL]改成步驟3負責網站本身的repo網址(通常是https://[user_name].github.io/)；B. [title]改隨意（會顯示往站上）；C. [theme]改成前幾步驟挑選的 關於hugo.toml參數\r參數與功能跟主題密切相關，建議先翻看主題給的Documents。以Lightbi為例，參數的說明就放在Demo網站的文章裡：https://lightbi-hugo-theme.netlify.app/en/post/2020/parameters/\r初步測試：hugo server，應該會有空白模板或theme預設範本網頁 有些theme偏舊，這步會出現問題，直接換一個theme比較省事 正確的話bash或cmd會顯示網站生成的頁數、靜態檔案數量等資訊 找到其中Web Server is available at http://localhost:1313/...這行，貼到瀏覽器，有出現看起來像網頁的樣子就對 確認ok後要再提交一次更改到github git add . git commit -m \"Set up website with theme\" git push origin main 【下一回】自架網站筆記：使用Github + Hugo（中） ","description":"——自架靜態網站的過程紀錄．上篇——","tags":["hugo","blog","website"],"title":"自架網站筆記：使用Github + Hugo（上）","uri":"/post/2025/website/create_static_web_1/"}]
