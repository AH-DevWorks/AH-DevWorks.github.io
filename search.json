[{"content":"【前一回】自架網站筆記：使用Github + Hugo（上） PART II : 設定內容倉庫（Contents-Repo） 本地另一個資料夾clone「放網站內容的repo（PART I步驟3建立的Contents-Repo）」 同樣初始化 touch README.md echo \"# [Contents-Repo]\" \u003e README.md git add README.md git commit -m \"Initial commit\" git push origin main 建立內容結構/資料夾 這裡可按照自己需要的層級或theme建議的層級來做 mkdir content cd content mkdir notes post {{/\u003c alert_box role=“danger” title=“注意” content=“結構資料夾要包含Hugo在building網站時需要的各子資料夾” \u003e/}}\n通常要有「contents」、「static」這兩個資料夾，但也不一定，像Lightbi就是「contents」、「assets」這兩個，「img」包含在assets/裡。建議翻查主題的Documents，有寫最好，沒寫的話就只能自己多hugo server測試幾次。\n建立一篇測試文章，如 echo -e \"+++\\ntitle = \\\"First Note\\\"\\ndate = 2025-04-05\\n+++\\n\\nThis is my first note.\" \u003e content/notes/first-note.md 或自己寫一個.md檔 push上去 注意這裡不要執行 hugo new site，Contents-Repo只負責網站上的內容檔案 將 Contents-Repo 引入到 Website-Repo cd回到 PART I 建立好的 Website-Repo 資料夾 加入 Contents-Repo 作為子模組，將 Contents-Repo 的內容直接映射到 content/ 資料夾 git submodule add -b main https://github.com/[user_name]/[Contents-Repo].git content assets 注意：這裡可能會出現像 fatal: 'content' already exists and is not a valid git repo 等錯誤–\u003e直接把原本資料夾裡有的「content」砍掉（或是裡面資料先備份到其他地方、之後再放回去） 抓取submodule內容 git submodule update --init --recursive 再次 hugo server 測試，正確的話原本在Contents-Repo裡面的文章（步驟4做的）應該會顯示在網站theme對應的地方（如網站 [Notes] 標籤底下） 沒問題的話記得push提交更改 PART III : 部署網站到 GitHub Pages 生成靜態檔案：在Website-Repo用 hugo指令，在其下的 public/ 資料夾生成靜態網站檔案 把public/資料夾裡已生成的靜態網站全部檔案挪到前一層（手動把檔案複製貼上也可以） cp -r public/* . 提交 git add . git commit -m \"Generate static site\" git push origin main 檢查網站是否正常顯示（github倉庫-Settings-Pages會顯示「Your site live at https://...」） 做到這，網站其實就算是架好了，其他細節跟QA放在下篇。 【待續】 ","description":"——自架靜態網站的過程紀錄．中篇——","tags":["hugo","blog","website"],"title":"自架網站筆記：使用Github + Hugo（中）","uri":"/post/2025/website/create_static_web_2/"},{"content":"養成班第一天 今天只是發筆電、填表單、教務事項通知，明天才開始正式課程。但畢竟是課程第一天，還是留一篇簡短日記，當作歷程紀錄。 下午自我介紹環節，有不少資訊本科系或做過科技業，甚至還有自費生，真心佩服。 簡單翻了一下歷屆學長姐成果，從電腦視覺到混合應用的都有。該來想想專題的主題了（小組專題＆個人的Side Project）。希望結訓後履歷至少能塞滿一整頁。 下課後自己摸了幾個小時，終於弄懂怎麼改前幾天架好的靜態網站字型樣式。字型是換好了，但html和css自覺沒有很懂，UI也想再改改，能力待加強。 看了一下課表，後天沒課，到時再來簡單紀錄從去年8月開始到現在的程式歷程。 越來越覺得時間不夠用。前幾周時間都花在天天台北—中壢來回找房子，Udemy進度也嚴重落後。 改天再補一篇前幾周的一波三折找房記。 ","description":"學生二周目","tags":["learning"],"title":"轉職路：AI養成班 Day 1.","uri":"/notes/2025/diary_2025_04_07/"},{"content":" 第一篇文章，總之先簡單記錄這個靜態網站怎麼做的，不然大概隔幾天又忘光光。 原本只打算寫給自己複習用，所以有些我已經懂的部份（像是Git）寫比較簡單。如果有緣的你無意看到這篇，想看懂，但看不懂，歡迎私信我。 如果你/妳看到這篇文章的時候，網站已經有留言功能，也歡迎留言詢問。 PART 0 : 在動手之前 - 關於這個靜態網站 預先構想這個網站會由兩大部份（2 repositories）構成：\nWebsite-Repo：負責靜態網站呈現（用 Hugo build 出來的 HTML/CSS/JS）。 Contents-Repo：放原始內容（markdown，如 content/notes、content/diary）。 未來更新內容主要會在 Contents-Repo，然後將生成的網站部署到 Website-Repo。 也會將其他專案 repo（像 side projects）整合進這個 Hugo 網站。 行有餘力再多加上其他功能（Google Analytics, SEO, comments） PART I : 基礎設定 已經有github帳號 Windows winget install Hugo.Hugo.Extended 安裝Hugo（建議安裝 Hugo Extended版本，方便後續自訂模板樣式） github新建兩個repo：一個放內容（Contents-Repo），一個負責網站本身(Website-Repo. – ex.AH-DevWorks.github.io)，分別clone到本地的資料夾（這時兩個倉庫都還是空的，正常） {{/\u003c alert_box role=“warning” title=“建議” content=“上述操作需要有「git」以及「github」的基礎理解，如果不懂的話，請先關鍵字google或問AI。” \u003e/}}\n初始化git分支 touch README.md echo \"# [Website-Repo]\" \u003e README.md git add README.md git commit -m \"Initial commit\" git push origin main 本地clone放網站內容的repo，hugo new site . 設在母資料夾較佳，建議別再額外新增如 hugo new site [MySite etc.]，否則後續要每次都手動挪動/public或額外設定自動腳本，會很麻煩。 若母資料夾已有內容（如README.md），則用 hugo new site . --force 等Hugo自動建立好內容後，cd到themes資料夾；挑個Hugo的theme，照著說明來裝（例如clone 到 themes資料夾，或用Git submodules處理） {{/* \u003c info_cards header=“suggest” title=“這裡以Lightbi為例” content=“https://themes.gohugo.io/themes/lightbi-hugo/\" \u003e */}} 把這個theme設成預設： 回到步驟5建立好的母資料夾，vi hugo.toml 編輯toml內容： A. [baseURL]改成步驟3負責網站本身的repo網址(通常是https://[user_name].github.io/)；B. [title]改隨意（會顯示往站上）；C. [theme]改成前幾步驟挑選的 {{/\u003c alert_box role=“success” title=“關於hugo.toml參數” content=“參數與功能跟主題密切相關，建議先翻看主題給的Documents。” \u003e/}} {{/* \u003c info_cards header=“suggest” title=“以Lightbi為例” content=“參數的說明就放在Demo網站的文章裡：連結” \u003e */}}\n初步測試：hugo server，應該會有空白模板或theme預設範本網頁 有些theme偏舊，這步會出現問題，直接換一個theme比較省事 正確的話bash或cmd會顯示網站生成的頁數、靜態檔案數量等資訊 找到其中Web Server is available at http://localhost:1313/...這行，貼到瀏覽器，有出現看起來像網頁的樣子就對 確認ok後要再提交一次更改到github git add . git commit -m \"Set up website with theme\" git push origin main 【下一回】自架網站筆記：使用Github + Hugo（中） ","description":"——自架靜態網站的過程紀錄．上篇——","tags":["hugo","blog","website"],"title":"自架網站筆記：使用Github + Hugo（上）","uri":"/post/2025/website/create_static_web_1/"}]
