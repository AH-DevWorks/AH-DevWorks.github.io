[{"content":"自架網站筆記：使用Github + Hugo（上） 自架網站筆記：使用Github + Hugo（中） 更新靜態網站內容的方法 把新內容準備好（Markdown, image等檔案要放到Content-Repo裡各自對應的子資料夾），更新push。 git add . git commit -m \"新增文章：new-post\" git push origin main # 如果檔案較多較大，push後建議等一下 確認前一步驟content-repo已經上傳、更新好了之後，轉到Web-Repo 🌟Web-Repo 更新submodule: git submodule update --remote (可選) git status 檢查content-repo檔案有引入 git add [檔案] 後，可以先 hugo server 本地確認網站更新無誤；或直接 hugo 後把 public/ 內新檔覆蓋更新到母資料夾 git add . –\u003e git commit –\u003e git push origin main ，過幾分鐘 github 處理好，刷新網站即可。 可以到github 的web-repo檢查進度（如下圖✅｜萬一出現❌表示哪裡出了問題，要回頭檢查） 常見QA \u0026 Tips 【本機跑正常，GitHub Pages 樣式卻很簡陋】：一路做到PART III都沒問題，但實際網址連到的網頁外觀卻跟「hugo server」測試時「http://localhost:1313/…」的網頁明顯不同。 通常是baseURL沒設定好，或是publish的相對路徑、theme路徑或資源沒有正確被拷貝，導致Github Pages抓不到樣式 建議前述PART I的步驟7第二點再次確認：baseURL應該會是「https://[你的使用者名稱].github.io/」 確認hugo生成的public檔案必須全部拷貝到前一層資料夾（通常就是「/[你的使用者名稱].github.io」） 且每次修正後，都要重新hugo、update一次，讓Github Pagese更新（通常push後不會即時刷新，要等一下 –\u003e 可看github倉庫-Settings-Pages網站網址底下的小字「Last deployed by @user xxx minutes ago」來判斷刷新了沒） 有時候可能是theme本身的問題，假如theme本身有exampleSite（contents, layout等資料夾），建議可以複製回去、保持樣式，之後再來把範本內文取代掉 修改網站圖示(Favicon / Website Icon) 瀏覽網頁時，畫面上方網頁名稱的旁邊的那個小icon就是Favicon，預設會是主題自帶的icon。 製作 Favicon : 可以用 favicon.io 或 RealFaviconGenerator 之類的免費網站；懂PS的話也可以自己做，記得縮成512x512再轉成 .ico 或 .png 格式。 把Web-Repo/static/favicon 底下的檔案替換掉，重新hugo就行。 個人心得 拿關鍵字去google能找到很多「X分鐘快速架設網站」的文章或影片，但實際操作發現比較適合「就只是要個網站放些簡單文章/日記而已」的人，要多些功能的話，那複雜度就會開始上升了。 就我個人而言，首先構思網站的架構、層級劃分、文章類型就花了些時間； 挑theme又花了些時間，第一個挑的theme在clone時還碰到一堆缺少前製套件之類的奇怪狀況……； 再來又開始想「要把Content-Repo當成submodule？還是反過來把Web-Repo當成Content-Repo的sub？」之類，攸關彈性跟未來維護性等等的問題…… 明明簡單來說就只有兩個repo而已，花了快10小時，至少打掉重來三次……可能我是資質比較駑鈍的那種吧( 之後或許會不定期更新有關UI調整、自動部署（GitHub Actions/Hugo Deploy）、Project導入等等的筆記。 有任何疑問歡迎私信我 只是回信可能比較慢，請見諒。要是一直沒回覆，可以隔週再寄一次。\n— A.H.Dev-Works.\n參考資源 HUGO Docs Creating a Blog with Hugo and Github in 10 minutes –\u003e 注意這教的是把Web-Repo當成submodule的方法 【懶人包】使用 Hugo 5 分鐘內快速架設個人網站，號稱現在最快的自架網站方式 –\u003e 主要參考Hugo 從零開始: 用github pages 上傳靜態網站 Lightbi-Demo genryu-font ","description":"——自架靜態網站的過程紀錄．下篇——","tags":["hugo","blog","website"],"title":"自架網站筆記：使用Github + Hugo（下）","uri":"/post/2025/website/create_static_web_3/"},{"content":"【前一回】自架網站筆記：使用Github + Hugo（上） PART II : 設定內容倉庫（Contents-Repo） 本地另一個資料夾clone「放網站內容的repo（PART I步驟3建立的Contents-Repo）」 同樣初始化 touch README.md echo \"# [Contents-Repo]\" \u003e README.md git add README.md git commit -m \"Initial commit\" git push origin main 建立內容結構/資料夾 這裡可按照自己需要的層級或theme建議的層級來做 mkdir content cd content mkdir notes post 注意\r結構資料夾要包含Hugo在building網站時需要的各子資料夾\r通常是「contents」、「static」這兩個資料夾，但也不一定，建議翻查主題的Documents，有寫最好，沒寫的話就只能自己多hugo server測試幾次。\n建立一篇測試文章，如 echo -e \"+++\\ntitle = \\\"First Note\\\"\\ndate = 2025-04-05\\n+++\\n\\nThis is my first note.\" \u003e content/notes/first-note.md 或自己寫一個.md檔 push上去 注意這裡不要執行 hugo new site，Contents-Repo只負責網站上的內容檔案 [2025/04/11 更新] 6. 把Content-Repo的檔案（content/資料夾裡的.md文件 ＆ 可能有static/裡的圖片等額外檔案）確認都ok後，在這個資料夾先git add -\u003e commit -\u003e push 一次後，手動複製 content/ static/兩資料夾到 Web-Repo/ 底下，覆蓋更新原本Web-Repo/裡面的同名資料夾跟檔案 註: 原本submodule引入的方式太複雜，也容易出錯，反正兩個repo的檔案都在同一電腦本機，乾脆版本管理用各自的git，移動用手動的處理比較快。 再次 hugo server 測試，正確的話原本在Contents-Repo裡面的文章（步驟4做的）應該會顯示在網站對應的地方（如網站 [Notes] 標籤底下） 沒問題的話記得Web-repo 也要 push提交更改。 之後主要寫日記、文章、圖片都在Content-Repo進行，完成後git版本更新，再複製進Web-Repo/ 後 hugo，Web-Repo/也記得每次都要版本更新。這樣萬一哪次檔案不小心誤刪或蓋掉，還是可以回溯。 PART III : 部署網站到 GitHub Pages 生成靜態檔案：在Website-Repo用 hugo指令，在其下的 public/ 資料夾生成靜態網站檔案 把public/資料夾裡已生成的靜態網站全部檔案挪到前一層（手動把檔案複製貼上也可以） cp -r public/* . 提交 git add . git commit -m \"Generate static site\" git push origin main 再次add -\u003e commit -\u003e push 檢查網站是否正常顯示（github倉庫-Settings-Pages會顯示「Your site live at https://...」） 做到這，網站其實就算是架好了，其他細節跟QA放在下篇。 自架網站筆記：使用Github + Hugo（下） ","description":"——自架靜態網站的過程紀錄．中篇——","tags":["hugo","blog","website"],"title":"自架網站筆記：使用Github + Hugo（中）","uri":"/post/2025/website/create_static_web_2/"},{"content":"養成班第一天 今天只是發筆電、填表單、教務事項通知，明天才開始正式課程。但畢竟是課程第一天，還是留一篇簡短日記，當作歷程紀錄。 下午自我介紹環節，有不少資訊本科系或做過科技業，甚至還有自費生，真心佩服。 簡單翻了一下歷屆學長姐成果，從電腦視覺到混合應用的都有。該來想想專題的主題了（小組專題＆個人的Side Project）。希望結訓後履歷至少能塞滿一整頁。 下課後自己摸了幾個小時，終於弄懂怎麼改前幾天架好的靜態網站字型樣式。字型是換好了，但html和css自覺沒有很懂，UI也想再改改，能力待加強。 看了一下課表，後天沒課，到時再來簡單紀錄從去年8月開始到現在的程式歷程。 越來越覺得時間不夠用。前幾周時間都花在天天台北—中壢來回找房子，Udemy進度也嚴重落後。 改天再補一篇前幾周的一波三折找房記。 ","description":"學生二周目","tags":["learning"],"title":"轉職路：AI養成班 Day 1.","uri":"/notes/2025/diary_2025_04_07/"},{"content":" 第一篇文章，總之先簡單記錄這個靜態網站怎麼做的，不然大概隔幾天又忘光光。 原本只打算寫給自己複習用，所以有些我已經懂的部份（像是Git）寫比較簡單。如果有緣的你無意看到這篇，想看懂，但看不懂，歡迎私信我。 如果你/妳看到這篇文章的時候，網站已經有留言功能，也歡迎留言詢問。 PART 0 : 在動手之前 - 關於這個靜態網站 預先構想這個網站會由兩大部份（2 repositories）構成：\nWebsite-Repo：負責靜態網站呈現（用 Hugo build 出來的 HTML/CSS/JS）。 Contents-Repo：放原始內容（markdown，如 content/notes、content/diary）。 未來更新內容主要會在 Contents-Repo，然後將生成的網站部署到 Website-Repo。 也會將其他專案 repo（像 side projects）整合進這個 Hugo 網站。 行有餘力再多加上其他功能（Google Analytics, SEO, comments） PART I : 基礎設定 已經有github帳號 Windows winget install Hugo.Hugo.Extended 安裝Hugo（建議安裝 Hugo Extended版本，方便後續自訂模板樣式） github新建兩個repo：一個放內容（Contents-Repo），一個負責網站本身(Website-Repo. – ex.AH-DevWorks.github.io)，分別clone到本地的資料夾（這時兩個倉庫都還是空的，正常） 建議\r上述操作需要有「git」以及「github」的基礎理解，如果不懂的話，請先關鍵字google或問AI。\r初始化git分支 touch README.md echo \"# [Website-Repo]\" \u003e README.md git add README.md git commit -m \"Initial commit\" git push origin main 本地clone放網站內容的repo，hugo new site . 設在母資料夾較佳，建議別再額外新增如 hugo new site [MySite etc.]，否則後續要每次都手動挪動/public或額外設定自動腳本，會很麻煩。 若母資料夾已有內容（如README.md），則用 hugo new site . --force 等Hugo自動建立好內容後，cd到themes資料夾；挑個Hugo的theme，照著說明來裝（例如clone 到 themes資料夾，或用Git submodules處理） {{/* \u003c info_cards header=“suggest” title=“這裡以Lightbi為例” content=“https://themes.gohugo.io/themes/lightbi-hugo/\" \u003e */}} 把這個theme設成預設： 回到步驟5建立好的母資料夾，vi hugo.toml 編輯toml內容： A. [baseURL]改成步驟3負責網站本身的repo網址(通常是https://[user_name].github.io/)；B. [title]改隨意（會顯示往站上）；C. [theme]改成前幾步驟挑選的 關於hugo.toml參數\r參數與功能跟主題密切相關，建議先翻看主題給的Documents。以Lightbi為例，參數的說明就放在Demo網站的文章裡：https://lightbi-hugo-theme.netlify.app/en/post/2020/parameters/\r初步測試：hugo server，應該會有空白模板或theme預設範本網頁 有些theme偏舊，這步會出現問題，直接換一個theme比較省事 正確的話bash或cmd會顯示網站生成的頁數、靜態檔案數量等資訊 找到其中Web Server is available at http://localhost:1313/...這行，貼到瀏覽器，有出現看起來像網頁的樣子就對 確認ok後要再提交一次更改到github git add . git commit -m \"Set up website with theme\" git push origin main 【下一回】自架網站筆記：使用Github + Hugo（中） ","description":"——自架靜態網站的過程紀錄．上篇——","tags":["hugo","blog","website"],"title":"自架網站筆記：使用Github + Hugo（上）","uri":"/post/2025/website/create_static_web_1/"}]
